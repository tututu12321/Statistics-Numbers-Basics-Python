import numpy as np
import matplotlib.pyplot as plt

# Simulation parameters
num_samples = 1000  # Number of samples (simulations)

# Corner analysis ranges
# Process, voltage, and temperature ranges (simulating fast/slow variations)
process_fast = 1.1  # Fast process (higher drive strength)
process_slow = 0.9  # Slow process (lower drive strength)
voltage_max = 1.3   # Maximum voltage
voltage_min = 0.9   # Minimum voltage
temperature_max = 125  # Maximum temperature (°C)
temperature_min = -40  # Minimum temperature (°C)

# Randomly sample process, voltage, and temperature variations
process_variation = np.random.uniform(process_slow, process_fast, num_samples)
voltage_variation = np.random.uniform(voltage_min, voltage_max, num_samples)
temperature_variation = np.random.uniform(temperature_min, temperature_max, num_samples)

# Simulate circuit performance based on process, voltage, and temperature
def simulate_performance(process, voltage, temperature):
    base_performance = 100  # Base performance level
    performance = base_performance * process * (voltage / 1.0) * (1 - 0.01 * (temperature - 25))
    return performance

# Calculate performance for each sample
performance_results = simulate_performance(process_variation, voltage_variation, temperature_variation)

# Statistical analysis of the results
mean_performance = np.mean(performance_results)
std_performance = np.std(performance_results)
min_performance = np.min(performance_results)
max_performance = np.max(performance_results)

# Display statistical results
print(f"Mean Performance: {mean_performance:.2f}")
print(f"Performance Standard Deviation: {std_performance:.2f}")
print(f"Minimum Performance: {min_performance:.2f}")
print(f"Maximum Performance: {max_performance:.2f}")

# Plot histogram of performance results
plt.figure(figsize=(10, 6))
plt.hist(performance_results, bins=30, color='blue', alpha=0.7)
plt.title('Circuit Performance Distribution (Corner Analysis)')
plt.xlabel('Circuit Performance')
plt.ylabel('Frequency')
plt.grid(True)
plt.show()

# Visualizing the impact of process, voltage, and temperature variations
plt.figure(figsize=(12, 8))

# Process variation vs performance
plt.subplot(3, 1, 1)
plt.scatter(process_variation, performance_results, color='red', alpha=0.5)
plt.title('Process Variation vs Circuit Performance')
plt.xlabel('Process Variation')
plt.ylabel('Circuit Performance')

# Voltage variation vs performance
plt.subplot(3, 1, 2)
plt.scatter(voltage_variation, performance_results, color='green', alpha=0.5)
plt.title('Voltage Variation vs Circuit Performance')
plt.xlabel('Voltage (V)')
plt.ylabel('Circuit Performance')

# Temperature variation vs performance
plt.subplot(3, 1, 3)
plt.scatter(temperature_variation, performance_results, color='blue', alpha=0.5)
plt.title('Temperature Variation vs Circuit Performance')
plt.xlabel('Temperature (°C)')
plt.ylabel('Circuit Performance')

plt.tight_layout()
plt.show()
