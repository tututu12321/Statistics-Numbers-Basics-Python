import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import bernoulli, binom, geom, hypergeom, poisson, uniform, norm, gamma, chi2, beta, t

# Set up the plot
fig, axs = plt.subplots(4, 3, figsize=(15, 20))
fig.suptitle('Probability Distributions', fontsize=16)

### 4-1. Bernoulli Distribution
p = 0.5  # Probability of success
x_bernoulli = [0, 1]
y_bernoulli = bernoulli.pmf(x_bernoulli, p)
axs[0, 0].bar(x_bernoulli, y_bernoulli)
axs[0, 0].set_title('4-1. Bernoulli Distribution')

### 4-2. Binomial Distribution
n, p = 10, 0.5  # Number of trials and probability of success
x_binom = np.arange(0, n+1)
y_binom = binom.pmf(x_binom, n, p)
axs[0, 1].bar(x_binom, y_binom)
axs[0, 1].set_title('4-2. Binomial Distribution')

### 4-3. Geometric Distribution
p = 0.3  # Probability of success
x_geom = np.arange(1, 11)
y_geom = geom.pmf(x_geom, p)
axs[0, 2].bar(x_geom, y_geom)
axs[0, 2].set_title('4-3. Geometric Distribution')

### 4-4. Hypergeometric Distribution
M, n, N = 20, 7, 12  # Population size, number of successes, sample size
x_hypergeom = np.arange(0, N+1)
y_hypergeom = hypergeom.pmf(x_hypergeom, M, n, N)
axs[1, 0].bar(x_hypergeom, y_hypergeom)
axs[1, 0].set_title('4-4. Hypergeometric Distribution')

### 4-5. Poisson Distribution
mu = 3  # Mean
x_poisson = np.arange(0, 15)
y_poisson = poisson.pmf(x_poisson, mu)
axs[1, 1].bar(x_poisson, y_poisson)
axs[1, 1].set_title('4-5. Poisson Distribution')

### 4-6. Uniform Distribution
a, b = 0, 1  # Lower and upper bounds
x_uniform = np.linspace(a, b, 100)
y_uniform = uniform.pdf(x_uniform, a, b-a)
axs[1, 2].plot(x_uniform, y_uniform)
axs[1, 2].set_title('4-6. Uniform Distribution')

### 4-7. Normal Distribution
mu, sigma = 0, 1  # Mean and standard deviation
x_norm = np.linspace(-4, 4, 100)
y_norm = norm.pdf(x_norm, mu, sigma)
axs[2, 0].plot(x_norm, y_norm)
axs[2, 0].set_title('4-7. Normal Distribution')

### 4-7-1. Standard Normal Distribution Probability
x_standard_norm = np.linspace(-4, 4, 100)
y_standard_norm = norm.pdf(x_standard_norm)
axs[2, 1].plot(x_standard_norm, y_standard_norm)
axs[2, 1].set_title('4-7-1. Standard Normal Distribution')

### 4-7-2. Normal Distribution Probability Calculation
mu, sigma = 0, 2  # Different mean and standard deviation
x_norm_custom = np.linspace(-8, 8, 100)
y_norm_custom = norm.pdf(x_norm_custom, mu, sigma)
axs[2, 2].plot(x_norm_custom, y_norm_custom)
axs[2, 2].set_title('4-7-2. Custom Normal Distribution')

### 4-8. Gamma Distribution
shape, scale = 2, 2  # Shape and scale parameters
x_gamma = np.linspace(0, 20, 100)
y_gamma = gamma.pdf(x_gamma, shape, scale=scale)
axs[3, 0].plot(x_gamma, y_gamma)
axs[3, 0].set_title('4-8. Gamma Distribution')

### 4-9. Chi-Square Distribution
df = 3  # Degrees of freedom
x_chi2 = np.linspace(0, 15, 100)
y_chi2 = chi2.pdf(x_chi2, df)
axs[3, 1].plot(x_chi2, y_chi2)
axs[3, 1].set_title('4-9. Chi-Square Distribution')

### 4-10. Beta Distribution
a, b = 2, 5  # Alpha and Beta parameters
x_beta = np.linspace(0, 1, 100)
y_beta = beta.pdf(x_beta, a, b)
axs[3, 2].plot(x_beta, y_beta)
axs[3, 2].set_title('4-10. Beta Distribution')

### 4-11. T Distribution
df = 10  # Degrees of freedom
x_t = np.linspace(-4, 4, 100)
y_t = t.pdf(x_t, df)
plt.figure(figsize=(6, 4))
plt.plot(x_t, y_t)
plt.title('4-11. T Distribution')
plt.xlabel('x')
plt.ylabel('Probability Density')
plt.grid(True)
plt.show()

# Adjust layout
plt.tight_layout()
plt.show()
